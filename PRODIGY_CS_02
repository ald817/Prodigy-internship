##Develop a simple image encryption tool using pixel manipulation. You can perform operations like swapping pixel values or applying a basic mathematical operation to each pixel.
Allow users to encrypt and decrypt images.



from PIL import Image
import numpy as np

def encrypt_image(input_path, output_path, key):
    # Load the image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Encrypt the pixels using a basic operation (e.g., add the key)
    encrypted_array = (img_array + key) % 256

    # Convert back to image and save
    encrypted_img = Image.fromarray(encrypted_array.astype('uint8'))
    encrypted_img.save(output_path)
    print(f"Image encrypted and saved as {output_path}")

def decrypt_image(input_path, output_path, key):
    # Load the encrypted image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Decrypt the pixels (reverse the operation)
    decrypted_array = (img_array - key) % 256

    # Convert back to image and save
    decrypted_img = Image.fromarray(decrypted_array.astype('uint8'))
    decrypted_img.save(output_path)
    print(f"Image decrypted and saved as {output_path}")

if __name__ == "__main__":
    print("Image Encryption Tool")
    mode = input("Choose mode (encrypt/decrypt): ").strip().lower()
    input_path = input("Enter input image path: ").strip()
    output_path = input("Enter output image path: ").strip()
    key = int(input("Enter encryption key (integer): "))

    if mode == "encrypt":
        encrypt_image(input_path, output_path, key)
    elif mode == "decrypt":
        decrypt_image(input_path, output_path, key)
    else:
        print("Invalid mode selected!")
